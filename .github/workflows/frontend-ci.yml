name: Frontends CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

jobs:
  discover-changed-frontends:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.set-matrix.outputs.projects }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch base branch (for PRs)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}:refs/remotes/origin/${{ github.event.pull_request.base.ref }}

          - name: Detect changed frontends
          id: set-matrix
          run: |
            set -euo pipefail

            BASE_REF=master
            if [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
              BASE_REF=${{ github.event.pull_request.base.ref }}
            fi
            echo "Comparing with base ref: $BASE_REF"

            # Ensure the base ref exists locally (safe even if already fetched)
            if ! git rev-parse --verify origin/"$BASE_REF" >/dev/null 2>&1; then
              git fetch origin "$BASE_REF":refs/remotes/origin/"$BASE_REF"
            fi

            changed_files=$(git diff --name-only origin/"$BASE_REF" HEAD || true)
            echo "Changed files: $changed_files"

            # Get unique frontend project names (second path segment)
            projects=$(printf '%s\n' "$changed_files" | awk -F/ '/^frontends\// {print $2}' | sort -u)

            # Count non-empty lines (projects)
            count=$(printf '%s\n' "$projects" | awk 'NF' | wc -l | tr -d ' ')
            if [ -z "$count" ]; then
              count=0
            fi

            if [ "$count" -eq 0 ]; then
              # export empty JSON array and zero count
              echo "projects=[]" >> "$GITHUB_OUTPUT"
              echo "projects_count=0" >> "$GITHUB_OUTPUT"
              echo "No frontend changes detected."
              exit 0
            fi

            # Build JSON array safely using python3 (avoids jq dependency)
            json=$(printf '%s\n' "$projects" | python3 -c 'import sys, json; print(json.dumps([l for l in sys.stdin.read().splitlines() if l]))')

            echo "projects=$json" >> "$GITHUB_OUTPUT"
            echo "projects_count=$count" >> "$GITHUB_OUTPUT"
            echo "Detected projects: $json"

  frontend-tests:
    needs: discover-changed-frontends
    runs-on: ubuntu-latest
    if: ${{ needs.discover-changed-frontends.outputs.projects_count != '0' }}
    strategy:
      matrix:
        project: ${{ fromJSON(needs.discover-changed-frontends.outputs.projects) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: frontends/${{ matrix.project }}/node_modules
          key: npm-${{ matrix.project }}-${{ hashFiles('frontends/${{ matrix.project }}/package-lock.json') }}
          restore-keys: |
            npm-${{ matrix.project }}-

      - name: Install dependencies
        run: |
          cd frontends/${{ matrix.project }}
          npm install

      - name: Run linter
        run: |
          cd frontends/${{ matrix.project }}
          npm run lint

      - name: Run tests with coverage
        run: |
          cd frontends/${{ matrix.project }}
          npm run test:coverage
